import { Middleware, Store, createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { youtubeApi } from "./youtubeApi";


export const fetchPlaylistsAfterAuth = createAsyncThunk(
  'youtube/fetchPlaylists',
  async (token, { dispatch }) => {
    // Assuming you're using a hook generated by createApi to initiate the query
    const result = await dispatch(youtubeApi.endpoints.getPlaylists.initiate(token));
    // Handle the result of the query
    return result.data; // Or handle errors as needed
  }
);

export const youtubeSlice = createSlice({
  name: 'youtube',
  initialState: {
    playlists: [],
    // other state properties
  },
  reducers: {
    // reducers here, e.g., setToken, etc.
  },
  extraReducers: (builder) => {
    builder.addCase(fetchPlaylistsAfterAuth.fulfilled, (state, action) => {
      // Update state with the fetched playlists
      console.log(action)
      state.playlists = action.payload;
    });
    // Handle other cases (pending, rejected) as needed
  },
});


//export const playlistsMiddleware: any = (store: Store) => (next: any) => (action: any) => {
//  // Adjust the action type check according to your actual implementation
//  next(action);
//  if (action.type === 'auth/setAuthToken') {
//    // Dispatch the `getPlaylists` endpoint call using the RTK Query API
//    store.dispatch(youtubeApi.endpoints.getPlaylists.initiate({}) as any);
//  }

//  return next(action);
//};